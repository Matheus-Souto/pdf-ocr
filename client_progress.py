#!/usr/bin/env python3
"""
Cliente Python para demonstrar o uso do endpoint de progresso da API OCR.
Mostra como receber atualiza√ß√µes de progresso em tempo real.
"""

import requests
import json
import sys
import os
from pathlib import Path

def extract_text_with_progress(api_url: str, pdf_file_path: str, enhancement_level: str = "medium", resolution_scale: float = 2.0):
    """
    Extrai texto de um PDF com indicador de progresso.
    
    Args:
        api_url: URL da API
        pdf_file_path: Caminho para o arquivo PDF
        enhancement_level: N√≠vel de pr√©-processamento ("basic", "medium", "aggressive", "ultra")
        resolution_scale: Escala de resolu√ß√£o (1.0-4.0)
    """
    
    # Verificar se o arquivo existe
    pdf_path = Path(pdf_file_path)
    if not pdf_path.exists():
        print(f"‚ùå Erro: Arquivo '{pdf_file_path}' n√£o encontrado.")
        return None
    
    print(f"üìÑ Processando: {pdf_path.name}")
    print(f"üîß Configura√ß√µes:")
    print(f"   ‚Ä¢ N√≠vel de processamento: {enhancement_level}")
    print(f"   ‚Ä¢ Escala de resolu√ß√£o: {resolution_scale}x")
    print("‚îÄ" * 50)
    
    try:
        # Preparar dados para envio
        with open(pdf_path, 'rb') as file:
            files = {'file': file}
            data = {
                'enhancement_level': enhancement_level,
                'resolution_scale': str(resolution_scale)
            }
            
            # Fazer requisi√ß√£o com streaming
            response = requests.post(
                f"{api_url}/extract-text-progress/",
                files=files,
                data=data,
                stream=True
            )
            
            if response.status_code != 200:
                print(f"‚ùå Erro HTTP {response.status_code}: {response.text}")
                return None
            
            # Processar resposta em streaming
            extracted_data = None
            for line in response.iter_lines(decode_unicode=True):
                if line and line.startswith('data: '):
                    try:
                        json_data = json.loads(line[6:])  # Remove 'data: '
                        extracted_data = process_message(json_data)
                        if extracted_data and json_data.get('tipo') == 'concluido':
                            break
                    except json.JSONDecodeError as e:
                        print(f"‚ö†Ô∏è Erro ao decodificar JSON: {e}")
                        continue
            
            return extracted_data
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        return None
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return None

def save_extracted_text(data: dict, output_file: str = None):
    """
    Salva o texto extra√≠do em arquivo.
    
    Args:
        data: Dados retornados pela API
        output_file: Arquivo de sa√≠da (opcional)
    """
    
    if not data or 'resultados' not in data:
        print("‚ùå Nenhum dado para salvar")
        return
    
    # Nome do arquivo de sa√≠da
    if not output_file:
        filename = data['arquivo']['nome'].replace('.pdf', '_extracted.txt')
        output_file = f"extracted_{filename}"
    
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            # Cabe√ßalho
            f.write(f"# Texto Extra√≠do de: {data['arquivo']['nome']}\n")
            f.write(f"# Tamanho do arquivo: {data['arquivo']['tamanho_mb']}MB\n")
            f.write(f"# Total de p√°ginas: {data['processamento']['total_paginas']}\n")
            f.write(f"# Total de caracteres: {data['estatisticas']['total_caracteres']:,}\n")
            f.write(f"# Total de palavras: {data['estatisticas']['total_palavras']:,}\n")
            f.write(f"# Total de linhas: {data['estatisticas']['total_linhas']:,}\n")
            f.write(f"# P√°ginas com texto: {data['estatisticas']['paginas_com_texto']}\n")
            f.write(f"# P√°ginas vazias: {data['estatisticas']['paginas_vazias']}\n")
            f.write(f"# M√©dia caracteres/p√°gina: {data['estatisticas']['media_caracteres_por_pagina']:.1f}\n")
            
            if data['resultados']['resumo_conteudo']['pagina_mais_longa']:
                f.write(f"# P√°gina mais longa: {data['resultados']['resumo_conteudo']['pagina_mais_longa']}\n")
            if data['resultados']['resumo_conteudo']['pagina_mais_curta']:
                f.write(f"# P√°gina mais curta: {data['resultados']['resumo_conteudo']['pagina_mais_curta']}\n")
                
            f.write("=" * 80 + "\n\n")
            
            # Conte√∫do por p√°gina
            for page_data in data['resultados']['texto_por_pagina']:
                f.write(f"=== P√ÅGINA {page_data['pagina']} ===\n")
                f.write(f"Estat√≠sticas: {page_data['estatisticas']['caracteres']} caracteres, ")
                f.write(f"{page_data['estatisticas']['palavras']} palavras, ")
                f.write(f"{page_data['estatisticas']['linhas']} linhas\n")
                f.write("-" * 40 + "\n")
                f.write(page_data['texto'])
                f.write("\n\n" + "=" * 80 + "\n\n")
        
        print(f"üíæ Texto salvo em: {output_file}")
        
    except Exception as e:
        print(f"‚ùå Erro ao salvar arquivo: {e}")

def main():
    """
    Fun√ß√£o principal do cliente com interface de linha de comando melhorada.
    """
    print("üîç Cliente PDF OCR com Progresso em Tempo Real")
    print("=" * 60)
    print("üìå Uso: python client_progress.py <arquivo.pdf> [enhancement_level] [resolution_scale]")
    print()
    
    if len(sys.argv) < 2:
        print("‚ùå Erro: Por favor, forne√ßa o caminho do arquivo PDF")
        print()
        print("üìã Exemplos de uso:")
        print("  python client_progress.py documento.pdf")
        print("  python client_progress.py documento.pdf medium 2.0")
        print("  python client_progress.py documento.pdf ultra 3.0")
        print()
        print("üìö Par√¢metros dispon√≠veis:")
        print("  enhancement_level: basic, medium, aggressive, ultra (padr√£o: medium)")
        print("  resolution_scale: 1.0-4.0 (padr√£o: 2.0)")
        sys.exit(1)
    
    pdf_path = sys.argv[1]
    
    # Configura√ß√µes padr√£o
    enhancement_level = "medium"
    resolution_scale = 2.0
    
    # Processar argumentos opcionais
    if len(sys.argv) >= 3:
        enhancement_level = sys.argv[2]
    if len(sys.argv) >= 4:
        try:
            resolution_scale = float(sys.argv[3])
        except ValueError:
            print("‚ùå Erro: resolution_scale deve ser um n√∫mero decimal (ex: 2.0)")
            sys.exit(1)
    
    # Validar par√¢metros
    if not os.path.exists(pdf_path):
        print(f"‚ùå Erro: Arquivo '{pdf_path}' n√£o encontrado!")
        sys.exit(1)
    
    if enhancement_level not in ["basic", "medium", "aggressive", "ultra"]:
        print("‚ùå Erro: enhancement_level deve ser 'basic', 'medium', 'aggressive' ou 'ultra'")
        sys.exit(1)
    
    if not 1.0 <= resolution_scale <= 4.0:
        print("‚ùå Erro: resolution_scale deve estar entre 1.0 e 4.0")
        sys.exit(1)
    
    # Executar extra√ß√£o
    extracted_data = extract_text_with_progress(API_URL, pdf_path, enhancement_level, resolution_scale)
    
    if extracted_data:
        print("\n" + "=" * 50)
        print("üíæ Deseja salvar o texto extra√≠do em um arquivo?")
        save_choice = input("Digite 's' para sim, ou Enter para n√£o: ").lower().strip()
        
        if save_choice == 's':
            output_file = input("Nome do arquivo (ou Enter para nome autom√°tico): ").strip()
            if not output_file:
                output_file = None
            
            save_extracted_text(extracted_data, output_file)
        else:
            print("‚úÖ Extra√ß√£o conclu√≠da. Texto n√£o foi salvo.")
    else:
        print("‚ùå Falha na extra√ß√£o do texto.")
        sys.exit(1)

if __name__ == "__main__":
    main() 